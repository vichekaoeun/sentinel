{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport { Stomp } from 'stompjs';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.subscriptions = new Map();\n  }\n  connect(onConnect, onError) {\n    const socket = new SockJS('/ws');\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Connected to WebSocket:', frame);\n      this.connected = true;\n      if (onConnect) onConnect();\n    }, error => {\n      console.error('WebSocket connection error:', error);\n      this.connected = false;\n      if (onError) onError(error);\n    });\n  }\n  subscribe(destination, callback) {\n    if (!this.stompClient || !this.connected) {\n      console.warn('WebSocket not connected');\n      return null;\n    }\n    const subscription = this.stompClient.subscribe(destination, message => {\n      try {\n        const data = JSON.parse(message.body);\n        callback(data);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n    this.subscriptions.set(destination, subscription);\n    return subscription;\n  }\n  unsubscribe(destination) {\n    const subscription = this.subscriptions.get(destination);\n    if (subscription) {\n      subscription.unsubscribe();\n      this.subscriptions.delete(destination);\n    }\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n      this.connected = false;\n      this.subscriptions.clear();\n    }\n  }\n  isConnected() {\n    return this.connected;\n  }\n}\nexport default new WebSocketService();","map":{"version":3,"names":["SockJS","Stomp","WebSocketService","constructor","stompClient","connected","subscriptions","Map","connect","onConnect","onError","socket","over","frame","console","log","error","subscribe","destination","callback","warn","subscription","message","data","JSON","parse","body","set","unsubscribe","get","delete","disconnect","clear","isConnected"],"sources":["/Users/vichekaoeun/Projects/sentinel/sentinel/frontend/src/services/websocketService.js"],"sourcesContent":["import SockJS from 'sockjs-client';\nimport { Stomp } from 'stompjs';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.subscriptions = new Map();\n  }\n\n  connect(onConnect, onError) {\n    const socket = new SockJS('/ws');\n    this.stompClient = Stomp.over(socket);\n    \n    this.stompClient.connect(\n      {},\n      (frame) => {\n        console.log('Connected to WebSocket:', frame);\n        this.connected = true;\n        if (onConnect) onConnect();\n      },\n      (error) => {\n        console.error('WebSocket connection error:', error);\n        this.connected = false;\n        if (onError) onError(error);\n      }\n    );\n  }\n\n  subscribe(destination, callback) {\n    if (!this.stompClient || !this.connected) {\n      console.warn('WebSocket not connected');\n      return null;\n    }\n\n    const subscription = this.stompClient.subscribe(destination, (message) => {\n      try {\n        const data = JSON.parse(message.body);\n        callback(data);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n\n    this.subscriptions.set(destination, subscription);\n    return subscription;\n  }\n\n  unsubscribe(destination) {\n    const subscription = this.subscriptions.get(destination);\n    if (subscription) {\n      subscription.unsubscribe();\n      this.subscriptions.delete(destination);\n    }\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n      this.connected = false;\n      this.subscriptions.clear();\n    }\n  }\n\n  isConnected() {\n    return this.connected;\n  }\n}\n\nexport default new WebSocketService();\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,eAAe;AAClC,SAASC,KAAK,QAAQ,SAAS;AAE/B,MAAMC,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;EAChC;EAEAC,OAAOA,CAACC,SAAS,EAAEC,OAAO,EAAE;IAC1B,MAAMC,MAAM,GAAG,IAAIX,MAAM,CAAC,KAAK,CAAC;IAChC,IAAI,CAACI,WAAW,GAAGH,KAAK,CAACW,IAAI,CAACD,MAAM,CAAC;IAErC,IAAI,CAACP,WAAW,CAACI,OAAO,CACtB,CAAC,CAAC,EACDK,KAAK,IAAK;MACTC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAAC;MAC7C,IAAI,CAACR,SAAS,GAAG,IAAI;MACrB,IAAII,SAAS,EAAEA,SAAS,CAAC,CAAC;IAC5B,CAAC,EACAO,KAAK,IAAK;MACTF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,IAAI,CAACX,SAAS,GAAG,KAAK;MACtB,IAAIK,OAAO,EAAEA,OAAO,CAACM,KAAK,CAAC;IAC7B,CACF,CAAC;EACH;EAEAC,SAASA,CAACC,WAAW,EAAEC,QAAQ,EAAE;IAC/B,IAAI,CAAC,IAAI,CAACf,WAAW,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACxCS,OAAO,CAACM,IAAI,CAAC,yBAAyB,CAAC;MACvC,OAAO,IAAI;IACb;IAEA,MAAMC,YAAY,GAAG,IAAI,CAACjB,WAAW,CAACa,SAAS,CAACC,WAAW,EAAGI,OAAO,IAAK;MACxE,IAAI;QACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;QACrCP,QAAQ,CAACI,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOP,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC,CAAC;IAEF,IAAI,CAACV,aAAa,CAACqB,GAAG,CAACT,WAAW,EAAEG,YAAY,CAAC;IACjD,OAAOA,YAAY;EACrB;EAEAO,WAAWA,CAACV,WAAW,EAAE;IACvB,MAAMG,YAAY,GAAG,IAAI,CAACf,aAAa,CAACuB,GAAG,CAACX,WAAW,CAAC;IACxD,IAAIG,YAAY,EAAE;MAChBA,YAAY,CAACO,WAAW,CAAC,CAAC;MAC1B,IAAI,CAACtB,aAAa,CAACwB,MAAM,CAACZ,WAAW,CAAC;IACxC;EACF;EAEAa,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAAC3B,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAAC2B,UAAU,CAAC,CAAC;MAC7B,IAAI,CAAC1B,SAAS,GAAG,KAAK;MACtB,IAAI,CAACC,aAAa,CAAC0B,KAAK,CAAC,CAAC;IAC5B;EACF;EAEAC,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAC5B,SAAS;EACvB;AACF;AAEA,eAAe,IAAIH,gBAAgB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}