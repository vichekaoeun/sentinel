{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  console.log('API Request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('API Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  return Promise.reject(error);\n});\nexport const apiService = {\n  // Health check\n  getHealth: () => apiClient.get('/api/health'),\n  // Alerts\n  getAlerts: () => apiClient.get('/api/alerts'),\n  acknowledgeAlert: alertId => apiClient.post(`/api/alerts/${alertId}/acknowledge`),\n  // Positions\n  getPositions: () => apiClient.get('/api/positions'),\n  // Trades\n  getTrades: () => apiClient.get('/api/trades'),\n  createTrade: tradeData => apiClient.post('/api/trades', tradeData),\n  // Live Trading\n  getMarketOverview: () => apiClient.get('/api/live-trading/market-overview'),\n  getLivePrice: symbol => apiClient.get(`/api/live-trading/price/${symbol}`),\n  executeLiveTrade: tradeData => apiClient.post('/api/live-trading/execute', tradeData),\n  getRecentTrades: symbol => apiClient.get(`/api/live-trading/trades/${symbol}`),\n  getAvailableSymbols: () => apiClient.get('/api/live-trading/symbols')\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response","_error$response2","status","data","apiService","getHealth","get","getAlerts","acknowledgeAlert","alertId","post","getPositions","getTrades","createTrade","tradeData","getMarketOverview","getLivePrice","symbol","executeLiveTrade","getRecentTrades","getAvailableSymbols"],"sources":["/Users/vichekaoeun/Projects/sentinel/sentinel/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napiClient.interceptors.request.use(\n  (config) => {\n    console.log('API Request:', config.method?.toUpperCase(), config.url);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napiClient.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.status, error.response?.data);\n    return Promise.reject(error);\n  }\n);\n\nexport const apiService = {\n  // Health check\n  getHealth: () => apiClient.get('/api/health'),\n\n  // Alerts\n  getAlerts: () => apiClient.get('/api/alerts'),\n  acknowledgeAlert: (alertId) => apiClient.post(`/api/alerts/${alertId}/acknowledge`),\n\n  // Positions\n  getPositions: () => apiClient.get('/api/positions'),\n\n  // Trades\n  getTrades: () => apiClient.get('/api/trades'),\n  createTrade: (tradeData) => apiClient.post('/api/trades', tradeData),\n\n  // Live Trading\n  getMarketOverview: () => apiClient.get('/api/live-trading/market-overview'),\n  getLivePrice: (symbol) => apiClient.get(`/api/live-trading/price/${symbol}`),\n  executeLiveTrade: (tradeData) => apiClient.post('/api/live-trading/execute', tradeData),\n  getRecentTrades: (symbol) => apiClient.get(`/api/live-trading/trades/${symbol}`),\n  getAvailableSymbols: () => apiClient.get('/api/live-trading/symbols'),\n};\n\nexport default apiService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACVC,OAAO,CAACC,GAAG,CAAC,cAAc,GAAAF,cAAA,GAAED,MAAM,CAACI,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,EAAEL,MAAM,CAACM,GAAG,CAAC;EACrE,OAAON,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,SAAS,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CAChCW,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA;EACTV,OAAO,CAACK,KAAK,CAAC,YAAY,GAAAI,eAAA,GAAEJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,GAAAD,gBAAA,GAAEL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,uBAAdA,gBAAA,CAAgBE,IAAI,CAAC;EACzE,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAG;EACxB;EACAC,SAAS,EAAEA,CAAA,KAAMvB,SAAS,CAACwB,GAAG,CAAC,aAAa,CAAC;EAE7C;EACAC,SAAS,EAAEA,CAAA,KAAMzB,SAAS,CAACwB,GAAG,CAAC,aAAa,CAAC;EAC7CE,gBAAgB,EAAGC,OAAO,IAAK3B,SAAS,CAAC4B,IAAI,CAAC,eAAeD,OAAO,cAAc,CAAC;EAEnF;EACAE,YAAY,EAAEA,CAAA,KAAM7B,SAAS,CAACwB,GAAG,CAAC,gBAAgB,CAAC;EAEnD;EACAM,SAAS,EAAEA,CAAA,KAAM9B,SAAS,CAACwB,GAAG,CAAC,aAAa,CAAC;EAC7CO,WAAW,EAAGC,SAAS,IAAKhC,SAAS,CAAC4B,IAAI,CAAC,aAAa,EAAEI,SAAS,CAAC;EAEpE;EACAC,iBAAiB,EAAEA,CAAA,KAAMjC,SAAS,CAACwB,GAAG,CAAC,mCAAmC,CAAC;EAC3EU,YAAY,EAAGC,MAAM,IAAKnC,SAAS,CAACwB,GAAG,CAAC,2BAA2BW,MAAM,EAAE,CAAC;EAC5EC,gBAAgB,EAAGJ,SAAS,IAAKhC,SAAS,CAAC4B,IAAI,CAAC,2BAA2B,EAAEI,SAAS,CAAC;EACvFK,eAAe,EAAGF,MAAM,IAAKnC,SAAS,CAACwB,GAAG,CAAC,4BAA4BW,MAAM,EAAE,CAAC;EAChFG,mBAAmB,EAAEA,CAAA,KAAMtC,SAAS,CAACwB,GAAG,CAAC,2BAA2B;AACtE,CAAC;AAED,eAAeF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}