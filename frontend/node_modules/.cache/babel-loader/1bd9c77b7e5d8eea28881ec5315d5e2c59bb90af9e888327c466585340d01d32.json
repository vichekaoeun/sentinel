{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.subscriptions = new Map();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n  }\n  connect(onConnect, onError) {\n    try {\n      // Use SockJS + STOMP to match Spring Boot WebSocket config\n      const socket = new SockJS('http://localhost:8080/ws');\n      this.stompClient = Stomp.over(socket);\n\n      // Disable debug logging\n      this.stompClient.debug = () => {};\n      this.stompClient.connect({}, frame => {\n        console.log('Connected to WebSocket via STOMP');\n        this.connected = true;\n        this.reconnectAttempts = 0;\n\n        // Reestablish subscriptions after reconnection\n        this.subscriptions.forEach((callback, destination) => {\n          this.stompClient.subscribe(destination, message => {\n            try {\n              const data = JSON.parse(message.body);\n              callback(data);\n            } catch (error) {\n              console.error('Error parsing WebSocket message:', error);\n            }\n          });\n        });\n        if (onConnect) onConnect();\n      }, error => {\n        console.error('WebSocket connection error:', error);\n        this.connected = false;\n        if (onError) onError(error);\n        this.attemptReconnect(onConnect, onError);\n      });\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      if (onError) onError(error);\n    }\n  }\n  attemptReconnect(onConnect, onError) {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      setTimeout(() => {\n        this.connect(onConnect, onError);\n      }, this.reconnectDelay * this.reconnectAttempts);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n  subscribe(destination, callback) {\n    if (!this.connected || !this.stompClient) {\n      console.warn('WebSocket not connected, storing subscription for later');\n      this.subscriptions.set(destination, callback);\n      return null;\n    }\n\n    // Store the subscription\n    this.subscriptions.set(destination, callback);\n\n    // Subscribe via STOMP\n    const subscription = this.stompClient.subscribe(destination, message => {\n      try {\n        const data = JSON.parse(message.body);\n        callback(data);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n    return subscription;\n  }\n  unsubscribe(destination) {\n    this.subscriptions.delete(destination);\n    // Note: STOMP subscriptions are automatically cleaned up when the client disconnects\n  }\n  send(destination, message) {\n    if (this.connected && this.stompClient) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.warn('WebSocket not connected, cannot send message');\n    }\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n      this.connected = false;\n      this.subscriptions.clear();\n    }\n  }\n  isConnected() {\n    return this.connected;\n  }\n}\nexport default new WebSocketService();","map":{"version":3,"names":["SockJS","Stomp","WebSocketService","constructor","stompClient","connected","subscriptions","Map","reconnectAttempts","maxReconnectAttempts","reconnectDelay","connect","onConnect","onError","socket","over","debug","frame","console","log","forEach","callback","destination","subscribe","message","data","JSON","parse","body","error","attemptReconnect","setTimeout","warn","set","subscription","unsubscribe","delete","send","stringify","disconnect","clear","isConnected"],"sources":["/Users/vichekaoeun/Projects/sentinel/sentinel/frontend/src/services/websocketService.js"],"sourcesContent":["import SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\n\nclass WebSocketService {\n  constructor() {\n    this.stompClient = null;\n    this.connected = false;\n    this.subscriptions = new Map();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n  }\n\n  connect(onConnect, onError) {\n    try {\n      // Use SockJS + STOMP to match Spring Boot WebSocket config\n      const socket = new SockJS('http://localhost:8080/ws');\n      this.stompClient = Stomp.over(socket);\n      \n      // Disable debug logging\n      this.stompClient.debug = () => {};\n      \n      this.stompClient.connect({}, \n        (frame) => {\n          console.log('Connected to WebSocket via STOMP');\n          this.connected = true;\n          this.reconnectAttempts = 0;\n          \n          // Reestablish subscriptions after reconnection\n          this.subscriptions.forEach((callback, destination) => {\n            this.stompClient.subscribe(destination, (message) => {\n              try {\n                const data = JSON.parse(message.body);\n                callback(data);\n              } catch (error) {\n                console.error('Error parsing WebSocket message:', error);\n              }\n            });\n          });\n          \n          if (onConnect) onConnect();\n        },\n        (error) => {\n          console.error('WebSocket connection error:', error);\n          this.connected = false;\n          if (onError) onError(error);\n          this.attemptReconnect(onConnect, onError);\n        }\n      );\n\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      if (onError) onError(error);\n    }\n  }\n\n  attemptReconnect(onConnect, onError) {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      \n      setTimeout(() => {\n        this.connect(onConnect, onError);\n      }, this.reconnectDelay * this.reconnectAttempts);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n\n  subscribe(destination, callback) {\n    if (!this.connected || !this.stompClient) {\n      console.warn('WebSocket not connected, storing subscription for later');\n      this.subscriptions.set(destination, callback);\n      return null;\n    }\n\n    // Store the subscription\n    this.subscriptions.set(destination, callback);\n    \n    // Subscribe via STOMP\n    const subscription = this.stompClient.subscribe(destination, (message) => {\n      try {\n        const data = JSON.parse(message.body);\n        callback(data);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n\n    return subscription;\n  }\n\n  unsubscribe(destination) {\n    this.subscriptions.delete(destination);\n    // Note: STOMP subscriptions are automatically cleaned up when the client disconnects\n  }\n\n  send(destination, message) {\n    if (this.connected && this.stompClient) {\n      this.stompClient.send(destination, {}, JSON.stringify(message));\n    } else {\n      console.warn('WebSocket not connected, cannot send message');\n    }\n  }\n\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n      this.connected = false;\n      this.subscriptions.clear();\n    }\n  }\n\n  isConnected() {\n    return this.connected;\n  }\n}\n\nexport default new WebSocketService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}